#!/usr/bin/env ruby

require "bundler/setup"
require "commander/import"
require "handy_apn"

HighLine.track_eof = false # Fix for built-in Ruby
Signal.trap("INT") {} # Suppress backtrace when exiting command

program :version, HandyApn::VERSION
program :description, 'A command-line interface for sending push notifications'

program :help, 'Author', 'Sushma Satish <sushmasatish@gmail.com>'
program :help, 'Website', 'https://github.com/sushmasatish'
program :help_formatter, :compact

default_command :help

command :push do |c|
  c.syntax = 'handy_apn push TOKEN [...]'
  c.summary = 'Sends an Apple Push Notification to specified devices'
  c.description = ''

  c.example 'description', 'handy_apn push <token> -m "Hello, World" -b 57 -s sosumi.aiff'
  c.option '-m', '--alert ALERT', 'Body of the alert to send in the push notification'
  c.option '-e', '--environment ENV', [:production, :development], 'Environment to send push notification (production or development (default))'
  c.option '-c', '--certificate CERTIFICATE', 'Path to certificate (.pem) file'
  c.option '-p', '--[no]-passphrase', 'Prompt for a certificate passphrase'

  c.action do |args, options|
    say_error "One or more device tokens required" and abort if args.empty?

    @environment = options.environment.downcase.to_sym rescue :development
    say_error "Invalid environment,'#{@environment}' (should be either :development or :production)" and abort unless [:development, :production].include?(@environment)

    @should_send_message_to_apn_prod = (@environment == :production)

    @certificate = options.certificate
    say_error "Missing certificate file option (-c /path/to/certificate.pem)" and abort unless @certificate
    say_error "Could not find certificate file '#{@certificate}'" and abort unless File.exists?(@certificate)

    @passphrase = options.passphrase ? password : ""

    @alert = options.alert

    unless @alert or @badge or @content_available or @data
      placeholder = "Enter your alert message"
      @alert = ask_editor placeholder
      say_error "Payload contents required" and abort if @alert.nil? or @alert == placeholder
    end

    ApnSendHelper.new(@certificate, 
			@passphrase,
			token, 
			@should_send_message_to_apn_prod, 
			@alert).send_push_notification()
  end
end

# command :feedback do |c|
#   c.syntax = 'apn feedback [...]'
#   c.summary = 'Queries the APN Feedback Service for failed device tokens.'
#   c.description = ''

#   c.example 'description', 'apn feedback -c /path/to/apple_push_certificate.pem'
#   c.option '-c', '--certificate CERTIFICATE', 'Path to certificate (.pem) file'
#   c.option '-e', '--environment ENV', [:production, :development], 'Environment to send push notification (production or development (default))'
#   c.option '-p', '--[no]-passphrase', 'Prompt for a certificate passphrase'

#   c.action do |args, options|

#     @environment = options.environment.downcase.to_sym rescue :development
#     say_error "Invalid environment,'#{@environment}' (should be either :development or :production)" and abort unless [:development, :production].include?(@environment)

#     @certificate = options.certificate
#     say_error "Missing certificate file option (-c /path/to/certificate.pem)" and abort unless @certificate
#     say_error "Could not find certificate file '#{@certificate}'" and abort unless File.exists?(@certificate)

#     @passphrase = options.passphrase ? password : ""

#     client = (@environment == :production) ? Houston::Client.production : Houston::Client.development
#     client.certificate = File.read(@certificate)
#     client.passphrase = @passphrase

#     begin
#       feedbackDevices = client.unregistered_devices

#       if feedbackDevices.any? && feedbackDevices.length > 0
#         puts feedbackDevices.to_json
#       else
#         say_ok "No feedback available"
#       end

#     rescue => message
#       say_error "Exception querying feedback: #{message}" and abort
#     end

#   end
# end